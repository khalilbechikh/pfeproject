services:
  database:
    container_name: database
    build:
      context: ./DATABASE
      dockerfile: dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      - ./VOLUMES/database:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  git-server:
    container_name: git-server
    build:
      context: ./GIT-SERVER
      dockerfile: Dockerfile
    volumes:
      - ./VOLUMES/repositorys:/srv/git
    ports:
      - "8080:80"
    networks:
      - app-network

  backend:
    user: "33:33"  # Run as www-data user
    container_name: backend
    build:
      context: ./WEB/BACKEND
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./WEB/BACKEND/CODE:/app
      - ./VOLUMES/repositorys:/srv/git
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - OTEL_RESOURCE_ATTRIBUTES=service.name=backend,service.version=1.0.0,deployment.environment=development
      - OTEL_LOG_LEVEL=debug
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
    depends_on:
      - database
      - git-server
      - otel-collector
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: ./WEB/FRONTEND
      dockerfile: Dockerfile
    working_dir: /app/my-react-app
    volumes:
      - ./WEB/FRONTEND/CODE/my-react-app:/app/my-react-app
      
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - app-network

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-config.yaml:/etc/otelcol-contrib/config.yaml
    command:
      - --config=/etc/otelcol-contrib/config.yaml
    ports:
      - "9464:9464"   # Prometheus scrape endpoint
    depends_on:
      - jaeger
      - prometheus
    networks:
      - app-network

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true   # âœ… turn on ports 4317/4318
    ports:
      - "16686:16686"   # UI
      - "14250:14250"   # native Jaeger gRPC (still available)
      - "14268:14268"   # native Jaeger HTTP
      - "4317:4317"     # OTLP/gRPC  (NEW)
      - "4318:4318"     # OTLP/HTTP  (optional)
      - "6831:6831/udp"
      - "6832:6832/udp"
    networks:
      - app-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - app-network

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

volumes:
  database:
  repositorys:
  backend_cache:
  grafana-data:

networks:
  app-network:
    driver: bridge
